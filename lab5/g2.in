program,anyChar,strElms,smtlist,stmt,simplestmt,assignstmt,expr,term,factor,iostmt,structstmt,ifstmt,cond,rel,forstmt,identifier,letter,digit,int,nr,ndigit,char,str,bool,declist,stmtlist,declaration,type,listdcl,compstmt
cst,verify,yes,no,print,var,read,return,list,go,as,with,:,;,[,],+,-,*,div,mod,=,is,>=,<,>,<=,and,or,not, ,.,',",0,1,2,3,4,5,6,7,8,9,_,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z
program
identifier -> letter | identifier anyChar
anyChar -> letter | digit | _
letter ->a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z|A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
digit -> 0|1|2|3|4|5|6|7|8|9
int -> 0 | nr | + nr | - nr
nr -> ndigit | nr digit
ndigit -> 1|2|3|4|5|6|7|8|9
char -> ' letter ' | ' digit '
str -> " strElms " | " str strElms "
strElms -> letter | digit
bool -> T | F
program -> declist stmtlist
declist -> declaration ; | declist declaration
declaration -> type identifier
type -> var | cst | listdcl
listdcl -> list [ nr ]
stmtlist -> stmt ; | stmtlist stmt
stmt -> simplestmt | structstmt
simplestmt -> assignstmt | iostmt
assignstmt -> identifier = expr
expr -> term | expr + term | expr - term
term -> factor | term * factor | term div factor | term mod factor
factor -> identifier | int
iostmt -> read identifier | print identifier
structstmt -> compstmt | ifstmt | forstmt
ifstmt -> verify cond yes : stmt no : stmt | verify cond yes : stmt
cond -> expr rel expr
rel -> is | < | <= | > | >=
forstmt -> go assignstmt as cond with assignstmt : stmt
