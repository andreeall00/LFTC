%{
#include <stdio.h>
#include <string.h>
#include <math.h>
#include <stdlib.h>

int line = 0;
char PIF[1000], ST[1000];
int freeIdST = 1;

char * transform(int number);
void addToPif(char symbol[], int value);
void addToST(char symbol[], char identifier[]);
%}

%option noyywrap
%option caseless

IDENTIFIER  [a-zA-Z][a-zA-Z0-9_]*
DIGIT 		[0-9]
NR  		[+-]?[1-9][0-9]*|0$
CHAR     	\'[a-zA-Z0-9]\'
STR 		\"[a-zA-Z0-9]*\"
BOOL    	[TF]

%%

cst    {addToPif(yytext, 0);}
verify {addToPif(yytext, 0);}
yes    {addToPif(yytext, 0);}
no     {addToPif(yytext, 0);}
print  {addToPif(yytext, 0);}
var    {addToPif(yytext, 0);}
read   {addToPif(yytext, 0);}
return {addToPif(yytext, 0);}
list   {addToPif(yytext, 0);}
go     {addToPif(yytext, 0);}
as     {addToPif(yytext, 0);}
with   {addToPif(yytext, 0);}

"+"	    {addToPif(yytext, 0);}
"-"	    {addToPif(yytext, 0);}
"*"	    {addToPif(yytext, 0);}
"div"	{addToPif(yytext, 0);}
"mod"	{addToPif(yytext, 0);}
"="	    {addToPif(yytext, 0);}
"is"    {addToPif(yytext, 0);}
">"     {addToPif(yytext, 0);}
">="    {addToPif(yytext, 0);}
"<"     {addToPif(yytext, 0);}
"<="	{addToPif(yytext, 0);}
"and"	{addToPif(yytext, 0);}
"or"    {addToPif(yytext, 0);}
"not"   {addToPif(yytext, 0);}
"."     {addToPif(yytext, 0);}

":"	{addToPif(yytext, 0);}
";"	{addToPif(yytext, 0);}
" "	{addToPif("space", 0);}
"["	{addToPif(yytext, 0);}
"]"	{addToPif(yytext, 0);}

[ \t]+  	{}
[\n]+       {line++;}

{BOOL} 		  {addToST(yytext, "cst");}
{IDENTIFIER}  {addToST(yytext, "id");}
{DIGIT} 	  {addToST(yytext, "cst");}
{NR}  	   	  {addToST(yytext, "cst");}
{CHAR}     	  {addToST(yytext, "cst");}
{STR} 		  {addToST(yytext, "cst");}
.|\n          {printf("Error: %s on line %d\n", yytext, line);}
%%
int main( argc, argv )
int argc;
char **argv;
{
    ++argv, --argc; /* skip over program name */
    if ( argc > 0 )
    yyin = fopen( argv[0], "r" );
    else
    yyin = stdin;
    yylex();
    
    printf("PIF:%s\n", PIF);
    printf("ST:%s\n", ST);
}

char* transform(int number)
{
    if(number == 0) return "0";
    int n = log10(number) + 1;
    int i;
    char *result = calloc(n, sizeof(char));
    for (i = n-1; i >= 0; --i, number /= 10)
    {
        result[i] = (number % 10) + '0';
    }
    return result;
}

void addToPif(char symbol[], int value){
    strcat(PIF, " ");
    strcat(PIF, symbol);
    strcat(PIF, ":");
    strcat(PIF, transform(value));
}

void addToST(char symbol[], char identifier[]){
    char * tokens, STCopy[1000];
	strcpy(STCopy, ST);
    tokens = strtok(STCopy," ");
    while (tokens != NULL){
        if(strcmp(tokens, symbol) == 0){
            tokens = strtok(NULL, " ");
            tokens = strtok(NULL, " ");
            addToPif(identifier, atoi(tokens));
            return;
        }
        tokens = strtok(NULL, " ");
    }
    strcat(ST, " ");
    strcat(ST, symbol);
    strcat(ST, " : ");
    strcat(ST, transform(freeIdST));
    addToPif(identifier, freeIdST++);
}
